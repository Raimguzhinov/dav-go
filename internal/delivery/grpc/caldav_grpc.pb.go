// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: protobuf/caldav.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Calendar_FolderList_FullMethodName         = "/calendar.api.Calendar/FolderList"
	Calendar_GetFolder_FullMethodName          = "/calendar.api.Calendar/GetFolder"
	Calendar_CreateFolder_FullMethodName       = "/calendar.api.Calendar/CreateFolder"
	Calendar_DeleteFolder_FullMethodName       = "/calendar.api.Calendar/DeleteFolder"
	Calendar_CalendarObjectList_FullMethodName = "/calendar.api.Calendar/CalendarObjectList"
	Calendar_GetCalendarObject_FullMethodName  = "/calendar.api.Calendar/GetCalendarObject"
	Calendar_PutCalendarObject_FullMethodName  = "/calendar.api.Calendar/PutCalendarObject"
	Calendar_DeleteEvent_FullMethodName        = "/calendar.api.Calendar/DeleteEvent"
)

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarClient interface {
	FolderList(ctx context.Context, in *FolderListRequest, opts ...grpc.CallOption) (*FolderListResponse, error)
	GetFolder(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*FolderInfo, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	DeleteFolder(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*FolderResponse, error)
	CalendarObjectList(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*CalendarObjectListResponse, error)
	GetCalendarObject(ctx context.Context, in *CalendarObjectRequest, opts ...grpc.CallOption) (*CalendarObjectInfo, error)
	PutCalendarObject(ctx context.Context, in *CalendarObjectInfo, opts ...grpc.CallOption) (*PutCalendarObjectResponse, error)
	DeleteEvent(ctx context.Context, in *CalendarObjectRequest, opts ...grpc.CallOption) (*DeleteCalendarObjectResponse, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) FolderList(ctx context.Context, in *FolderListRequest, opts ...grpc.CallOption) (*FolderListResponse, error) {
	out := new(FolderListResponse)
	err := c.cc.Invoke(ctx, Calendar_FolderList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetFolder(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*FolderInfo, error) {
	out := new(FolderInfo)
	err := c.cc.Invoke(ctx, Calendar_GetFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, Calendar_CreateFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteFolder(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*FolderResponse, error) {
	out := new(FolderResponse)
	err := c.cc.Invoke(ctx, Calendar_DeleteFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) CalendarObjectList(ctx context.Context, in *FolderRequest, opts ...grpc.CallOption) (*CalendarObjectListResponse, error) {
	out := new(CalendarObjectListResponse)
	err := c.cc.Invoke(ctx, Calendar_CalendarObjectList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetCalendarObject(ctx context.Context, in *CalendarObjectRequest, opts ...grpc.CallOption) (*CalendarObjectInfo, error) {
	out := new(CalendarObjectInfo)
	err := c.cc.Invoke(ctx, Calendar_GetCalendarObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) PutCalendarObject(ctx context.Context, in *CalendarObjectInfo, opts ...grpc.CallOption) (*PutCalendarObjectResponse, error) {
	out := new(PutCalendarObjectResponse)
	err := c.cc.Invoke(ctx, Calendar_PutCalendarObject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *CalendarObjectRequest, opts ...grpc.CallOption) (*DeleteCalendarObjectResponse, error) {
	out := new(DeleteCalendarObjectResponse)
	err := c.cc.Invoke(ctx, Calendar_DeleteEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
// All implementations must embed UnimplementedCalendarServer
// for forward compatibility
type CalendarServer interface {
	FolderList(context.Context, *FolderListRequest) (*FolderListResponse, error)
	GetFolder(context.Context, *FolderRequest) (*FolderInfo, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error)
	DeleteFolder(context.Context, *FolderRequest) (*FolderResponse, error)
	CalendarObjectList(context.Context, *FolderRequest) (*CalendarObjectListResponse, error)
	GetCalendarObject(context.Context, *CalendarObjectRequest) (*CalendarObjectInfo, error)
	PutCalendarObject(context.Context, *CalendarObjectInfo) (*PutCalendarObjectResponse, error)
	DeleteEvent(context.Context, *CalendarObjectRequest) (*DeleteCalendarObjectResponse, error)
	mustEmbedUnimplementedCalendarServer()
}

// UnimplementedCalendarServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (UnimplementedCalendarServer) FolderList(context.Context, *FolderListRequest) (*FolderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FolderList not implemented")
}
func (UnimplementedCalendarServer) GetFolder(context.Context, *FolderRequest) (*FolderInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolder not implemented")
}
func (UnimplementedCalendarServer) CreateFolder(context.Context, *CreateFolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedCalendarServer) DeleteFolder(context.Context, *FolderRequest) (*FolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedCalendarServer) CalendarObjectList(context.Context, *FolderRequest) (*CalendarObjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalendarObjectList not implemented")
}
func (UnimplementedCalendarServer) GetCalendarObject(context.Context, *CalendarObjectRequest) (*CalendarObjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCalendarObject not implemented")
}
func (UnimplementedCalendarServer) PutCalendarObject(context.Context, *CalendarObjectInfo) (*PutCalendarObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutCalendarObject not implemented")
}
func (UnimplementedCalendarServer) DeleteEvent(context.Context, *CalendarObjectRequest) (*DeleteCalendarObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedCalendarServer) mustEmbedUnimplementedCalendarServer() {}

// UnsafeCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarServer will
// result in compilation errors.
type UnsafeCalendarServer interface {
	mustEmbedUnimplementedCalendarServer()
}

func RegisterCalendarServer(s grpc.ServiceRegistrar, srv CalendarServer) {
	s.RegisterService(&Calendar_ServiceDesc, srv)
}

func _Calendar_FolderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).FolderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_FolderList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).FolderList(ctx, req.(*FolderListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_GetFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetFolder(ctx, req.(*FolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_DeleteFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteFolder(ctx, req.(*FolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_CalendarObjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).CalendarObjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_CalendarObjectList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).CalendarObjectList(ctx, req.(*FolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetCalendarObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetCalendarObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_GetCalendarObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetCalendarObject(ctx, req.(*CalendarObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_PutCalendarObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarObjectInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).PutCalendarObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_PutCalendarObject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).PutCalendarObject(ctx, req.(*CalendarObjectInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calendar_DeleteEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*CalendarObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendar_ServiceDesc is the grpc.ServiceDesc for Calendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.api.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FolderList",
			Handler:    _Calendar_FolderList_Handler,
		},
		{
			MethodName: "GetFolder",
			Handler:    _Calendar_GetFolder_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _Calendar_CreateFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _Calendar_DeleteFolder_Handler,
		},
		{
			MethodName: "CalendarObjectList",
			Handler:    _Calendar_CalendarObjectList_Handler,
		},
		{
			MethodName: "GetCalendarObject",
			Handler:    _Calendar_GetCalendarObject_Handler,
		},
		{
			MethodName: "PutCalendarObject",
			Handler:    _Calendar_PutCalendarObject_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/caldav.proto",
}
