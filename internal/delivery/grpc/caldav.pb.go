// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.2
// source: protobuf/caldav.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Types int32

const (
	Types_event   Types = 0
	Types_todo    Types = 1
	Types_journal Types = 2
)

// Enum value maps for Types.
var (
	Types_name = map[int32]string{
		0: "event",
		1: "todo",
		2: "journal",
	}
	Types_value = map[string]int32{
		"event":   0,
		"todo":    1,
		"journal": 2,
	}
)

func (x Types) Enum() *Types {
	p := new(Types)
	*p = x
	return p
}

func (x Types) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Types) Descriptor() protoreflect.EnumDescriptor {
	return file_protobuf_caldav_proto_enumTypes[0].Descriptor()
}

func (Types) Type() protoreflect.EnumType {
	return &file_protobuf_caldav_proto_enumTypes[0]
}

func (x Types) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Types.Descriptor instead.
func (Types) EnumDescriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{0}
}

type FolderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUid []byte `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
}

func (x *FolderListRequest) Reset() {
	*x = FolderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderListRequest) ProtoMessage() {}

func (x *FolderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderListRequest.ProtoReflect.Descriptor instead.
func (*FolderListRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{0}
}

func (x *FolderListRequest) GetSenderUid() []byte {
	if x != nil {
		return x.SenderUid
	}
	return nil
}

type FolderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Folders []*FolderInfo `protobuf:"bytes,1,rep,name=folders,proto3" json:"folders,omitempty"`
}

func (x *FolderListResponse) Reset() {
	*x = FolderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderListResponse) ProtoMessage() {}

func (x *FolderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderListResponse.ProtoReflect.Descriptor instead.
func (*FolderListResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{1}
}

func (x *FolderListResponse) GetFolders() []*FolderInfo {
	if x != nil {
		return x.Folders
	}
	return nil
}

type FolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUid []byte `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	FolderUid []byte `protobuf:"bytes,2,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
}

func (x *FolderRequest) Reset() {
	*x = FolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderRequest) ProtoMessage() {}

func (x *FolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderRequest.ProtoReflect.Descriptor instead.
func (*FolderRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{2}
}

func (x *FolderRequest) GetSenderUid() []byte {
	if x != nil {
		return x.SenderUid
	}
	return nil
}

func (x *FolderRequest) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

type CreateFolderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUid []byte      `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	FolderUid []byte      `protobuf:"bytes,2,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	Folder    *FolderInfo `protobuf:"bytes,3,opt,name=folder,proto3" json:"folder,omitempty"`
}

func (x *CreateFolderRequest) Reset() {
	*x = CreateFolderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFolderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFolderRequest) ProtoMessage() {}

func (x *CreateFolderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFolderRequest.ProtoReflect.Descriptor instead.
func (*CreateFolderRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFolderRequest) GetSenderUid() []byte {
	if x != nil {
		return x.SenderUid
	}
	return nil
}

func (x *CreateFolderRequest) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *CreateFolderRequest) GetFolder() *FolderInfo {
	if x != nil {
		return x.Folder
	}
	return nil
}

type FolderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid            []byte  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name           string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description    *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	SupportedTypes *Types  `protobuf:"varint,4,opt,name=supported_types,json=supportedTypes,proto3,enum=calendar.api.Types,oneof" json:"supported_types,omitempty"`
	MaxSize        *uint64 `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3,oneof" json:"max_size,omitempty"`
}

func (x *FolderInfo) Reset() {
	*x = FolderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderInfo) ProtoMessage() {}

func (x *FolderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderInfo.ProtoReflect.Descriptor instead.
func (*FolderInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{4}
}

func (x *FolderInfo) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *FolderInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FolderInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *FolderInfo) GetSupportedTypes() Types {
	if x != nil && x.SupportedTypes != nil {
		return *x.SupportedTypes
	}
	return Types_event
}

func (x *FolderInfo) GetMaxSize() uint64 {
	if x != nil && x.MaxSize != nil {
		return *x.MaxSize
	}
	return 0
}

type FolderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FolderUid []byte `protobuf:"bytes,1,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
}

func (x *FolderResponse) Reset() {
	*x = FolderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FolderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FolderResponse) ProtoMessage() {}

func (x *FolderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FolderResponse.ProtoReflect.Descriptor instead.
func (*FolderResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{5}
}

func (x *FolderResponse) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

type CalendarObjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *CalendarObjectListResponse) Reset() {
	*x = CalendarObjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarObjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarObjectListResponse) ProtoMessage() {}

func (x *CalendarObjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarObjectListResponse.ProtoReflect.Descriptor instead.
func (*CalendarObjectListResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{6}
}

func (x *CalendarObjectListResponse) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type CalendarObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUid []byte `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	FolderUid []byte `protobuf:"bytes,2,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	ObjectUid []byte `protobuf:"bytes,3,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
}

func (x *CalendarObjectRequest) Reset() {
	*x = CalendarObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarObjectRequest) ProtoMessage() {}

func (x *CalendarObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarObjectRequest.ProtoReflect.Descriptor instead.
func (*CalendarObjectRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{7}
}

func (x *CalendarObjectRequest) GetSenderUid() []byte {
	if x != nil {
		return x.SenderUid
	}
	return nil
}

func (x *CalendarObjectRequest) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *CalendarObjectRequest) GetObjectUid() []byte {
	if x != nil {
		return x.ObjectUid
	}
	return nil
}

type CalendarObjectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SenderUid []byte    `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid,proto3" json:"sender_uid,omitempty"`
	FolderUid []byte    `protobuf:"bytes,2,opt,name=folder_uid,json=folderUid,proto3" json:"folder_uid,omitempty"`
	Etag      []byte    `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	Events    []*Event  `protobuf:"bytes,4,rep,name=events,proto3" json:"events,omitempty"`
	FreeBusy  *FreeBusy `protobuf:"bytes,5,opt,name=free_busy,json=freeBusy,proto3,oneof" json:"free_busy,omitempty"`
}

func (x *CalendarObjectInfo) Reset() {
	*x = CalendarObjectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarObjectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarObjectInfo) ProtoMessage() {}

func (x *CalendarObjectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarObjectInfo.ProtoReflect.Descriptor instead.
func (*CalendarObjectInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{8}
}

func (x *CalendarObjectInfo) GetSenderUid() []byte {
	if x != nil {
		return x.SenderUid
	}
	return nil
}

func (x *CalendarObjectInfo) GetFolderUid() []byte {
	if x != nil {
		return x.FolderUid
	}
	return nil
}

func (x *CalendarObjectInfo) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

func (x *CalendarObjectInfo) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *CalendarObjectInfo) GetFreeBusy() *FreeBusy {
	if x != nil {
		return x.FreeBusy
	}
	return nil
}

type PutCalendarObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectUid []byte `protobuf:"bytes,1,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
	Etag      []byte `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *PutCalendarObjectResponse) Reset() {
	*x = PutCalendarObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCalendarObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCalendarObjectResponse) ProtoMessage() {}

func (x *PutCalendarObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCalendarObjectResponse.ProtoReflect.Descriptor instead.
func (*PutCalendarObjectResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{9}
}

func (x *PutCalendarObjectResponse) GetObjectUid() []byte {
	if x != nil {
		return x.ObjectUid
	}
	return nil
}

func (x *PutCalendarObjectResponse) GetEtag() []byte {
	if x != nil {
		return x.Etag
	}
	return nil
}

type DeleteCalendarObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectUid []byte `protobuf:"bytes,1,opt,name=object_uid,json=objectUid,proto3" json:"object_uid,omitempty"`
}

func (x *DeleteCalendarObjectResponse) Reset() {
	*x = DeleteCalendarObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCalendarObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarObjectResponse) ProtoMessage() {}

func (x *DeleteCalendarObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarObjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteCalendarObjectResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCalendarObjectResponse) GetObjectUid() []byte {
	if x != nil {
		return x.ObjectUid
	}
	return nil
}

type FreeBusy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              []byte                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timestamp        uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StartTime        uint64                 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime          uint64                 `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Url              string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Contact          string                 `protobuf:"bytes,6,opt,name=contact,proto3" json:"contact,omitempty"`
	Organizer        *CalendarUserAddress   `protobuf:"bytes,7,opt,name=organizer,proto3" json:"organizer,omitempty"`
	Attendee         []*CalendarUserAddress `protobuf:"bytes,8,rep,name=attendee,proto3" json:"attendee,omitempty"`
	Comment          string                 `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	FreeBusy         string                 `protobuf:"bytes,10,opt,name=free_busy,json=freeBusy,proto3" json:"free_busy,omitempty"`
	RecurrenceStatus string                 `protobuf:"bytes,11,opt,name=recurrence_status,json=recurrenceStatus,proto3" json:"recurrence_status,omitempty"`
	XProp            *structpb.Struct       `protobuf:"bytes,12,opt,name=x_prop,json=xProp,proto3,oneof" json:"x_prop,omitempty"`
	IanaProp         *structpb.Struct       `protobuf:"bytes,13,opt,name=iana_prop,json=ianaProp,proto3,oneof" json:"iana_prop,omitempty"`
}

func (x *FreeBusy) Reset() {
	*x = FreeBusy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreeBusy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeBusy) ProtoMessage() {}

func (x *FreeBusy) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeBusy.ProtoReflect.Descriptor instead.
func (*FreeBusy) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{11}
}

func (x *FreeBusy) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *FreeBusy) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FreeBusy) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FreeBusy) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FreeBusy) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FreeBusy) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *FreeBusy) GetOrganizer() *CalendarUserAddress {
	if x != nil {
		return x.Organizer
	}
	return nil
}

func (x *FreeBusy) GetAttendee() []*CalendarUserAddress {
	if x != nil {
		return x.Attendee
	}
	return nil
}

func (x *FreeBusy) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FreeBusy) GetFreeBusy() string {
	if x != nil {
		return x.FreeBusy
	}
	return ""
}

func (x *FreeBusy) GetRecurrenceStatus() string {
	if x != nil {
		return x.RecurrenceStatus
	}
	return ""
}

func (x *FreeBusy) GetXProp() *structpb.Struct {
	if x != nil {
		return x.XProp
	}
	return nil
}

func (x *FreeBusy) GetIanaProp() *structpb.Struct {
	if x != nil {
		return x.IanaProp
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid           []byte                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Duration      int64                  `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"` // todo
	Summary       string                 `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty"`
	Class         string                 `protobuf:"bytes,7,opt,name=class,proto3" json:"class,omitempty"`
	Description   string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	Url           string                 `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Created       int64                  `protobuf:"varint,10,opt,name=created,proto3" json:"created,omitempty"`
	LastModified  int64                  `protobuf:"varint,11,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Status        bool                   `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`
	Transparent   bool                   `protobuf:"varint,13,opt,name=transparent,proto3" json:"transparent,omitempty"`
	Geo           string                 `protobuf:"bytes,14,opt,name=geo,proto3" json:"geo,omitempty"`
	Location      string                 `protobuf:"bytes,15,opt,name=location,proto3" json:"location,omitempty"`
	Priority      uint32                 `protobuf:"varint,16,opt,name=priority,proto3" json:"priority,omitempty"`
	Sequence      uint32                 `protobuf:"varint,17,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Categories    string                 `protobuf:"bytes,18,opt,name=categories,proto3" json:"categories,omitempty"`
	Attach        string                 `protobuf:"bytes,19,opt,name=attach,proto3" json:"attach,omitempty"`
	Comment       string                 `protobuf:"bytes,20,opt,name=comment,proto3" json:"comment,omitempty"`
	Contact       string                 `protobuf:"bytes,21,opt,name=contact,proto3" json:"contact,omitempty"`
	RequestStatus string                 `protobuf:"bytes,22,opt,name=request_status,json=requestStatus,proto3" json:"request_status,omitempty"`
	Related       string                 `protobuf:"bytes,23,opt,name=related,proto3" json:"related,omitempty"`
	Resources     string                 `protobuf:"bytes,24,opt,name=resources,proto3" json:"resources,omitempty"`
	Organizer     *CalendarUserAddress   `protobuf:"bytes,25,opt,name=organizer,proto3" json:"organizer,omitempty"`
	Attendee      []*CalendarUserAddress `protobuf:"bytes,26,rep,name=attendee,proto3" json:"attendee,omitempty"`
	RecurrenceSet *RecurrenceInfo        `protobuf:"bytes,27,opt,name=recurrence_set,json=recurrenceSet,proto3" json:"recurrence_set,omitempty"`
	XProp         *structpb.Struct       `protobuf:"bytes,28,opt,name=x_prop,json=xProp,proto3,oneof" json:"x_prop,omitempty"`
	IanaProp      *structpb.Struct       `protobuf:"bytes,29,opt,name=iana_prop,json=ianaProp,proto3,oneof" json:"iana_prop,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{12}
}

func (x *Event) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Event) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Event) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Event) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Event) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Event) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Event) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *Event) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *Event) GetTransparent() bool {
	if x != nil {
		return x.Transparent
	}
	return false
}

func (x *Event) GetGeo() string {
	if x != nil {
		return x.Geo
	}
	return ""
}

func (x *Event) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Event) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Event) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Event) GetCategories() string {
	if x != nil {
		return x.Categories
	}
	return ""
}

func (x *Event) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *Event) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Event) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *Event) GetRequestStatus() string {
	if x != nil {
		return x.RequestStatus
	}
	return ""
}

func (x *Event) GetRelated() string {
	if x != nil {
		return x.Related
	}
	return ""
}

func (x *Event) GetResources() string {
	if x != nil {
		return x.Resources
	}
	return ""
}

func (x *Event) GetOrganizer() *CalendarUserAddress {
	if x != nil {
		return x.Organizer
	}
	return nil
}

func (x *Event) GetAttendee() []*CalendarUserAddress {
	if x != nil {
		return x.Attendee
	}
	return nil
}

func (x *Event) GetRecurrenceSet() *RecurrenceInfo {
	if x != nil {
		return x.RecurrenceSet
	}
	return nil
}

func (x *Event) GetXProp() *structpb.Struct {
	if x != nil {
		return x.XProp
	}
	return nil
}

func (x *Event) GetIanaProp() *structpb.Struct {
	if x != nil {
		return x.IanaProp
	}
	return nil
}

type Alarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      string               `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Trigger     int64                `protobuf:"varint,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Duration    *int64               `protobuf:"varint,3,opt,name=duration,proto3,oneof" json:"duration,omitempty"`
	Repeat      *int64               `protobuf:"varint,4,opt,name=repeat,proto3,oneof" json:"repeat,omitempty"`
	Summary     *string              `protobuf:"bytes,5,opt,name=summary,proto3,oneof" json:"summary,omitempty"`
	Description *string              `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Attendee    *CalendarUserAddress `protobuf:"bytes,7,opt,name=attendee,proto3,oneof" json:"attendee,omitempty"`
	Attach      []string             `protobuf:"bytes,8,rep,name=attach,proto3" json:"attach,omitempty"`
	XProp       *structpb.Struct     `protobuf:"bytes,9,opt,name=x_prop,json=xProp,proto3,oneof" json:"x_prop,omitempty"`
	IanaProp    *structpb.Struct     `protobuf:"bytes,10,opt,name=iana_prop,json=ianaProp,proto3,oneof" json:"iana_prop,omitempty"`
}

func (x *Alarm) Reset() {
	*x = Alarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alarm) ProtoMessage() {}

func (x *Alarm) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alarm.ProtoReflect.Descriptor instead.
func (*Alarm) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{13}
}

func (x *Alarm) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Alarm) GetTrigger() int64 {
	if x != nil {
		return x.Trigger
	}
	return 0
}

func (x *Alarm) GetDuration() int64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *Alarm) GetRepeat() int64 {
	if x != nil && x.Repeat != nil {
		return *x.Repeat
	}
	return 0
}

func (x *Alarm) GetSummary() string {
	if x != nil && x.Summary != nil {
		return *x.Summary
	}
	return ""
}

func (x *Alarm) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Alarm) GetAttendee() *CalendarUserAddress {
	if x != nil {
		return x.Attendee
	}
	return nil
}

func (x *Alarm) GetAttach() []string {
	if x != nil {
		return x.Attach
	}
	return nil
}

func (x *Alarm) GetXProp() *structpb.Struct {
	if x != nil {
		return x.XProp
	}
	return nil
}

func (x *Alarm) GetIanaProp() *structpb.Struct {
	if x != nil {
		return x.IanaProp
	}
	return nil
}

type RecurrenceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          []byte   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	RecurrenceId uint64   `protobuf:"varint,2,opt,name=recurrence_id,json=recurrenceId,proto3" json:"recurrence_id,omitempty"`
	Date         uint64   `protobuf:"varint,3,opt,name=date,proto3" json:"date,omitempty"`
	Rrule        *RRule   `protobuf:"bytes,4,opt,name=rrule,proto3" json:"rrule,omitempty"`
	Exdates      []uint64 `protobuf:"varint,5,rep,packed,name=exdates,proto3" json:"exdates,omitempty"`
}

func (x *RecurrenceInfo) Reset() {
	*x = RecurrenceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecurrenceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecurrenceInfo) ProtoMessage() {}

func (x *RecurrenceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecurrenceInfo.ProtoReflect.Descriptor instead.
func (*RecurrenceInfo) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{14}
}

func (x *RecurrenceInfo) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *RecurrenceInfo) GetRecurrenceId() uint64 {
	if x != nil {
		return x.RecurrenceId
	}
	return 0
}

func (x *RecurrenceInfo) GetDate() uint64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *RecurrenceInfo) GetRrule() *RRule {
	if x != nil {
		return x.Rrule
	}
	return nil
}

func (x *RecurrenceInfo) GetExdates() []uint64 {
	if x != nil {
		return x.Exdates
	}
	return nil
}

type RRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Freq       string  `protobuf:"bytes,1,opt,name=freq,proto3" json:"freq,omitempty"`
	EndTime    *int64  `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	Count      *int64  `protobuf:"varint,3,opt,name=count,proto3,oneof" json:"count,omitempty"`
	Interval   *int64  `protobuf:"varint,4,opt,name=interval,proto3,oneof" json:"interval,omitempty"`
	BySecond   *int64  `protobuf:"varint,5,opt,name=by_second,json=bySecond,proto3,oneof" json:"by_second,omitempty"`
	ByMinute   *int64  `protobuf:"varint,6,opt,name=by_minute,json=byMinute,proto3,oneof" json:"by_minute,omitempty"`
	ByHour     *int64  `protobuf:"varint,7,opt,name=by_hour,json=byHour,proto3,oneof" json:"by_hour,omitempty"`
	ByDay      *int64  `protobuf:"varint,8,opt,name=by_day,json=byDay,proto3,oneof" json:"by_day,omitempty"`
	ByMonthDay *int64  `protobuf:"varint,9,opt,name=by_month_day,json=byMonthDay,proto3,oneof" json:"by_month_day,omitempty"`
	ByYearDay  *int64  `protobuf:"varint,10,opt,name=by_year_day,json=byYearDay,proto3,oneof" json:"by_year_day,omitempty"`
	ByWeekNo   *int64  `protobuf:"varint,11,opt,name=by_week_no,json=byWeekNo,proto3,oneof" json:"by_week_no,omitempty"`
	ByMonth    *int64  `protobuf:"varint,12,opt,name=by_month,json=byMonth,proto3,oneof" json:"by_month,omitempty"`
	BySetPos   *int64  `protobuf:"varint,13,opt,name=by_set_pos,json=bySetPos,proto3,oneof" json:"by_set_pos,omitempty"`
	Wkst       *string `protobuf:"bytes,14,opt,name=wkst,proto3,oneof" json:"wkst,omitempty"` // todo уточнить типы
}

func (x *RRule) Reset() {
	*x = RRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RRule) ProtoMessage() {}

func (x *RRule) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RRule.ProtoReflect.Descriptor instead.
func (*RRule) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{15}
}

func (x *RRule) GetFreq() string {
	if x != nil {
		return x.Freq
	}
	return ""
}

func (x *RRule) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *RRule) GetCount() int64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *RRule) GetInterval() int64 {
	if x != nil && x.Interval != nil {
		return *x.Interval
	}
	return 0
}

func (x *RRule) GetBySecond() int64 {
	if x != nil && x.BySecond != nil {
		return *x.BySecond
	}
	return 0
}

func (x *RRule) GetByMinute() int64 {
	if x != nil && x.ByMinute != nil {
		return *x.ByMinute
	}
	return 0
}

func (x *RRule) GetByHour() int64 {
	if x != nil && x.ByHour != nil {
		return *x.ByHour
	}
	return 0
}

func (x *RRule) GetByDay() int64 {
	if x != nil && x.ByDay != nil {
		return *x.ByDay
	}
	return 0
}

func (x *RRule) GetByMonthDay() int64 {
	if x != nil && x.ByMonthDay != nil {
		return *x.ByMonthDay
	}
	return 0
}

func (x *RRule) GetByYearDay() int64 {
	if x != nil && x.ByYearDay != nil {
		return *x.ByYearDay
	}
	return 0
}

func (x *RRule) GetByWeekNo() int64 {
	if x != nil && x.ByWeekNo != nil {
		return *x.ByWeekNo
	}
	return 0
}

func (x *RRule) GetByMonth() int64 {
	if x != nil && x.ByMonth != nil {
		return *x.ByMonth
	}
	return 0
}

func (x *RRule) GetBySetPos() int64 {
	if x != nil && x.BySetPos != nil {
		return *x.BySetPos
	}
	return 0
}

func (x *RRule) GetWkst() string {
	if x != nil && x.Wkst != nil {
		return *x.Wkst
	}
	return ""
}

type CalendarUserAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid                 []byte               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Address             string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Name                *string              `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	UserType            *string              `protobuf:"bytes,4,opt,name=user_type,json=userType,proto3,oneof" json:"user_type,omitempty"`
	DelegateFrom        *CalendarUserAddress `protobuf:"bytes,5,opt,name=delegate_from,json=delegateFrom,proto3,oneof" json:"delegate_from,omitempty"`
	DelegateTo          *CalendarUserAddress `protobuf:"bytes,6,opt,name=delegate_to,json=delegateTo,proto3,oneof" json:"delegate_to,omitempty"`
	Dir                 *string              `protobuf:"bytes,7,opt,name=dir,proto3,oneof" json:"dir,omitempty"`
	Member              *CalendarUserAddress `protobuf:"bytes,8,opt,name=member,proto3,oneof" json:"member,omitempty"`
	ParticipationStatus *string              `protobuf:"bytes,9,opt,name=participation_status,json=participationStatus,proto3,oneof" json:"participation_status,omitempty"`
	Role                *string              `protobuf:"bytes,10,opt,name=role,proto3,oneof" json:"role,omitempty"`
	Rsvp                *bool                `protobuf:"varint,11,opt,name=rsvp,proto3,oneof" json:"rsvp,omitempty"`
	SentBy              *CalendarUserAddress `protobuf:"bytes,12,opt,name=sent_by,json=sentBy,proto3,oneof" json:"sent_by,omitempty"`
}

func (x *CalendarUserAddress) Reset() {
	*x = CalendarUserAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_caldav_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalendarUserAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalendarUserAddress) ProtoMessage() {}

func (x *CalendarUserAddress) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_caldav_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalendarUserAddress.ProtoReflect.Descriptor instead.
func (*CalendarUserAddress) Descriptor() ([]byte, []int) {
	return file_protobuf_caldav_proto_rawDescGZIP(), []int{16}
}

func (x *CalendarUserAddress) GetUid() []byte {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *CalendarUserAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CalendarUserAddress) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CalendarUserAddress) GetUserType() string {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return ""
}

func (x *CalendarUserAddress) GetDelegateFrom() *CalendarUserAddress {
	if x != nil {
		return x.DelegateFrom
	}
	return nil
}

func (x *CalendarUserAddress) GetDelegateTo() *CalendarUserAddress {
	if x != nil {
		return x.DelegateTo
	}
	return nil
}

func (x *CalendarUserAddress) GetDir() string {
	if x != nil && x.Dir != nil {
		return *x.Dir
	}
	return ""
}

func (x *CalendarUserAddress) GetMember() *CalendarUserAddress {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *CalendarUserAddress) GetParticipationStatus() string {
	if x != nil && x.ParticipationStatus != nil {
		return *x.ParticipationStatus
	}
	return ""
}

func (x *CalendarUserAddress) GetRole() string {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return ""
}

func (x *CalendarUserAddress) GetRsvp() bool {
	if x != nil && x.Rsvp != nil {
		return *x.Rsvp
	}
	return false
}

func (x *CalendarUserAddress) GetSentBy() *CalendarUserAddress {
	if x != nil {
		return x.SentBy
	}
	return nil
}

var File_protobuf_caldav_proto protoreflect.FileDescriptor

var file_protobuf_caldav_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x61, 0x6c, 0x64, 0x61,
	0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x11, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x12, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x22, 0x4d, 0x0a, 0x0d, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x0a, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x48, 0x01, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x07, 0x6d, 0x61, 0x78,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x2f, 0x0a, 0x0e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x49, 0x0a, 0x1a, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x74, 0x0a, 0x15, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x22, 0xdb, 0x01, 0x0a, 0x12, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65,
	0x74, 0x61, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x48, 0x00, 0x52, 0x08, 0x66,
	0x72, 0x65, 0x65, 0x42, 0x75, 0x73, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x22, 0x4e, 0x0a, 0x19, 0x50, 0x75, 0x74, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x3d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x69, 0x64, 0x22, 0x8d, 0x04, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65,
	0x42, 0x75, 0x73, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x61,
	0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x75, 0x73,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x42, 0x75, 0x73,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x06, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x78, 0x50, 0x72, 0x6f, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x01, 0x52, 0x08, 0x69, 0x61, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x61,
	0x6e, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x22, 0xe9, 0x07, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x61, 0x74, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x78, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x05, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x09, 0x69, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x01, 0x52, 0x08, 0x69,
	0x61, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x78,
	0x5f, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x61, 0x6e, 0x61, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x22, 0xe3, 0x03, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12,
	0x1f, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x04, 0x52, 0x08, 0x61, 0x74, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12,
	0x33, 0x0a, 0x06, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x05, 0x52, 0x05, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x06, 0x52, 0x08, 0x69, 0x61, 0x6e, 0x61, 0x50, 0x72, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x69, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x22, 0xa0, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x65, 0x78, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xec, 0x04, 0x0a,
	0x05, 0x52, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x62, 0x79, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x62,
	0x79, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x62, 0x79,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x62,
	0x79, 0x48, 0x6f, 0x75, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x79, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x05, 0x62, 0x79, 0x44, 0x61,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0a, 0x62, 0x79,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62,
	0x79, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x08, 0x52, 0x09, 0x62, 0x79, 0x59, 0x65, 0x61, 0x72, 0x44, 0x61, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x6f, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x08, 0x62, 0x79, 0x57, 0x65, 0x65, 0x6b, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x62, 0x79, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x07, 0x62, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x08, 0x62, 0x79, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x6b, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x04, 0x77, 0x6b, 0x73, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x79, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x62, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x5f, 0x79,
	0x65, 0x61, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x79, 0x5f, 0x77,
	0x65, 0x65, 0x6b, 0x5f, 0x6e, 0x6f, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x6f,
	0x6e, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x77, 0x6b, 0x73, 0x74, 0x22, 0x97, 0x05, 0x0a, 0x13,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x48, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48,
	0x03, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x03, 0x64, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x05, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x72, 0x73, 0x76, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x04, 0x72, 0x73, 0x76, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x64, 0x69, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x72, 0x73, 0x76, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x79, 0x2a, 0x29, 0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x09,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x6f, 0x64,
	0x6f, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x6a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x10, 0x02,
	0x32, 0xb4, 0x05, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x4f, 0x0a,
	0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x12, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x23, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5e, 0x0a, 0x11, 0x50, 0x75, 0x74, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x27,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x61, 0x69, 0x6d, 0x67, 0x75, 0x7a, 0x68, 0x69, 0x6e,
	0x6f, 0x76, 0x2f, 0x64, 0x61, 0x76, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_caldav_proto_rawDescOnce sync.Once
	file_protobuf_caldav_proto_rawDescData = file_protobuf_caldav_proto_rawDesc
)

func file_protobuf_caldav_proto_rawDescGZIP() []byte {
	file_protobuf_caldav_proto_rawDescOnce.Do(func() {
		file_protobuf_caldav_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_caldav_proto_rawDescData)
	})
	return file_protobuf_caldav_proto_rawDescData
}

var file_protobuf_caldav_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_protobuf_caldav_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_protobuf_caldav_proto_goTypes = []any{
	(Types)(0),                           // 0: calendar.api.Types
	(*FolderListRequest)(nil),            // 1: calendar.api.FolderListRequest
	(*FolderListResponse)(nil),           // 2: calendar.api.FolderListResponse
	(*FolderRequest)(nil),                // 3: calendar.api.FolderRequest
	(*CreateFolderRequest)(nil),          // 4: calendar.api.CreateFolderRequest
	(*FolderInfo)(nil),                   // 5: calendar.api.FolderInfo
	(*FolderResponse)(nil),               // 6: calendar.api.FolderResponse
	(*CalendarObjectListResponse)(nil),   // 7: calendar.api.CalendarObjectListResponse
	(*CalendarObjectRequest)(nil),        // 8: calendar.api.CalendarObjectRequest
	(*CalendarObjectInfo)(nil),           // 9: calendar.api.CalendarObjectInfo
	(*PutCalendarObjectResponse)(nil),    // 10: calendar.api.PutCalendarObjectResponse
	(*DeleteCalendarObjectResponse)(nil), // 11: calendar.api.DeleteCalendarObjectResponse
	(*FreeBusy)(nil),                     // 12: calendar.api.FreeBusy
	(*Event)(nil),                        // 13: calendar.api.Event
	(*Alarm)(nil),                        // 14: calendar.api.Alarm
	(*RecurrenceInfo)(nil),               // 15: calendar.api.RecurrenceInfo
	(*RRule)(nil),                        // 16: calendar.api.RRule
	(*CalendarUserAddress)(nil),          // 17: calendar.api.CalendarUserAddress
	(*structpb.Struct)(nil),              // 18: google.protobuf.Struct
}
var file_protobuf_caldav_proto_depIdxs = []int32{
	5,  // 0: calendar.api.FolderListResponse.folders:type_name -> calendar.api.FolderInfo
	5,  // 1: calendar.api.CreateFolderRequest.folder:type_name -> calendar.api.FolderInfo
	0,  // 2: calendar.api.FolderInfo.supported_types:type_name -> calendar.api.Types
	13, // 3: calendar.api.CalendarObjectListResponse.events:type_name -> calendar.api.Event
	13, // 4: calendar.api.CalendarObjectInfo.events:type_name -> calendar.api.Event
	12, // 5: calendar.api.CalendarObjectInfo.free_busy:type_name -> calendar.api.FreeBusy
	17, // 6: calendar.api.FreeBusy.organizer:type_name -> calendar.api.CalendarUserAddress
	17, // 7: calendar.api.FreeBusy.attendee:type_name -> calendar.api.CalendarUserAddress
	18, // 8: calendar.api.FreeBusy.x_prop:type_name -> google.protobuf.Struct
	18, // 9: calendar.api.FreeBusy.iana_prop:type_name -> google.protobuf.Struct
	17, // 10: calendar.api.Event.organizer:type_name -> calendar.api.CalendarUserAddress
	17, // 11: calendar.api.Event.attendee:type_name -> calendar.api.CalendarUserAddress
	15, // 12: calendar.api.Event.recurrence_set:type_name -> calendar.api.RecurrenceInfo
	18, // 13: calendar.api.Event.x_prop:type_name -> google.protobuf.Struct
	18, // 14: calendar.api.Event.iana_prop:type_name -> google.protobuf.Struct
	17, // 15: calendar.api.Alarm.attendee:type_name -> calendar.api.CalendarUserAddress
	18, // 16: calendar.api.Alarm.x_prop:type_name -> google.protobuf.Struct
	18, // 17: calendar.api.Alarm.iana_prop:type_name -> google.protobuf.Struct
	16, // 18: calendar.api.RecurrenceInfo.rrule:type_name -> calendar.api.RRule
	17, // 19: calendar.api.CalendarUserAddress.delegate_from:type_name -> calendar.api.CalendarUserAddress
	17, // 20: calendar.api.CalendarUserAddress.delegate_to:type_name -> calendar.api.CalendarUserAddress
	17, // 21: calendar.api.CalendarUserAddress.member:type_name -> calendar.api.CalendarUserAddress
	17, // 22: calendar.api.CalendarUserAddress.sent_by:type_name -> calendar.api.CalendarUserAddress
	1,  // 23: calendar.api.Calendar.FolderList:input_type -> calendar.api.FolderListRequest
	3,  // 24: calendar.api.Calendar.GetFolder:input_type -> calendar.api.FolderRequest
	4,  // 25: calendar.api.Calendar.CreateFolder:input_type -> calendar.api.CreateFolderRequest
	3,  // 26: calendar.api.Calendar.DeleteFolder:input_type -> calendar.api.FolderRequest
	3,  // 27: calendar.api.Calendar.CalendarObjectList:input_type -> calendar.api.FolderRequest
	8,  // 28: calendar.api.Calendar.GetCalendarObject:input_type -> calendar.api.CalendarObjectRequest
	9,  // 29: calendar.api.Calendar.PutCalendarObject:input_type -> calendar.api.CalendarObjectInfo
	8,  // 30: calendar.api.Calendar.DeleteEvent:input_type -> calendar.api.CalendarObjectRequest
	2,  // 31: calendar.api.Calendar.FolderList:output_type -> calendar.api.FolderListResponse
	5,  // 32: calendar.api.Calendar.GetFolder:output_type -> calendar.api.FolderInfo
	6,  // 33: calendar.api.Calendar.CreateFolder:output_type -> calendar.api.FolderResponse
	6,  // 34: calendar.api.Calendar.DeleteFolder:output_type -> calendar.api.FolderResponse
	7,  // 35: calendar.api.Calendar.CalendarObjectList:output_type -> calendar.api.CalendarObjectListResponse
	9,  // 36: calendar.api.Calendar.GetCalendarObject:output_type -> calendar.api.CalendarObjectInfo
	10, // 37: calendar.api.Calendar.PutCalendarObject:output_type -> calendar.api.PutCalendarObjectResponse
	11, // 38: calendar.api.Calendar.DeleteEvent:output_type -> calendar.api.DeleteCalendarObjectResponse
	31, // [31:39] is the sub-list for method output_type
	23, // [23:31] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_protobuf_caldav_proto_init() }
func file_protobuf_caldav_proto_init() {
	if File_protobuf_caldav_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_caldav_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*FolderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*FolderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*FolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CreateFolderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FolderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*FolderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CalendarObjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CalendarObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CalendarObjectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PutCalendarObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCalendarObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FreeBusy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Alarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*RecurrenceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_caldav_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CalendarUserAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_caldav_proto_msgTypes[4].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[8].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[11].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[12].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[13].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[15].OneofWrappers = []any{}
	file_protobuf_caldav_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_caldav_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_caldav_proto_goTypes,
		DependencyIndexes: file_protobuf_caldav_proto_depIdxs,
		EnumInfos:         file_protobuf_caldav_proto_enumTypes,
		MessageInfos:      file_protobuf_caldav_proto_msgTypes,
	}.Build()
	File_protobuf_caldav_proto = out.File
	file_protobuf_caldav_proto_rawDesc = nil
	file_protobuf_caldav_proto_goTypes = nil
	file_protobuf_caldav_proto_depIdxs = nil
}
